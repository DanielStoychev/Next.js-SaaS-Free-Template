// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  memberships Membership[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// SaaS specific models
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  website     String?
  logo        String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  memberships   Membership[]
  subscriptions Subscription[]
  auditLogs     AuditLog[]

  @@map("organizations")
}

model Membership {
  id             String           @id @default(cuid())
  role           MembershipRole
  userId         String
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("memberships")
}

model Plan {
  id            String   @id
  name          String
  description   String?
  price         Int      // Price in cents
  interval      Interval
  features      Json     // JSON array of features
  stripePriceId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                   String             @id @default(cuid())
  organizationId       String
  planId               String
  stripeCustomerId     String?
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan         Plan         @relation(fields: [planId], references: [id])
  usageEvents  UsageEvent[]

  @@map("subscriptions")
}

model UsageEvent {
  id             String       @id @default(cuid())
  subscriptionId String
  eventType      String
  quantity       Int          @default(1)
  metadata       Json?
  timestamp      DateTime     @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("usage_events")
}

model AuditLog {
  id             String   @id @default(cuid())
  userId         String?
  organizationId String?
  action         String
  resource       String
  resourceId     String?
  ipAddress      String?
  userAgent      String?
  metadata       Json?
  timestamp      DateTime @default(now())

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("audit_logs")
}

// Enums
enum MembershipRole {
  OWNER
  ADMIN
  MEMBER

  @@map("membership_role")
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID

  @@map("subscription_status")
}

enum Interval {
  MONTH
  YEAR

  @@map("interval")
}

// Indexes for performance
// User indexes
// Organization indexes
// Subscription indexes
// Audit log indexes
